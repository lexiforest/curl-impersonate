# Makefile to build curl-impersonate
# Some Makefile tricks were taken from https://tech.davis-hansson.com/p/make/

SHELL := bash
.ONESHELL:
.SHELLFLAGS := -euc
.DELETE_ON_ERROR:
# MAKEFLAGS += --warn-undefined-variables
# MAKEFLAGS += --no-builtin-rules
SUBJOBS := 4

BROTLI_VERSION := 1.1.0
BROTLI_URL := https://github.com/google/brotli/archive/refs/tags/v${BROTLI_VERSION}.tar.gz
# Chrome 135.0.7049.41
# In case this is changed, update build-and-test-make.yml and build-win as well
BORING_SSL_COMMIT := 673e61fc215b178a90c0e67858bbf162c8158993
NGHTTP2_VERSION := 1.63.0
NGHTTP2_URL := https://github.com/nghttp2/nghttp2/releases/download/v$(NGHTTP2_VERSION)/nghttp2-$(NGHTTP2_VERSION).tar.bz2
LIBEV_VERSION := 4.33
LIBEV_URL := http://dist.schmorp.de/libev/libev-$(LIBEV_VERSION).tar.gz
# minimum version to support ENABLE_LIB_ONLY
NGTCP2_VERSION := 1.13.0
NGTCP2_URL := https://github.com/ngtcp2/ngtcp2/releases/download/v$(NGTCP2_VERSION)/ngtcp2-$(NGTCP2_VERSION).tar.bz2
NGHTTP3_VERSION := 1.9.0
NGHTTP3_URL := https://github.com/ngtcp2/nghttp3/releases/download/v$(NGHTTP3_VERSION)/nghttp3-$(NGHTTP3_VERSION).tar.bz2
ZLIB_VERSION := 1.3
ZLIB_URL := https://zlib.net/fossils/zlib-$(ZLIB_VERSION).tar.gz
ZSTD_VERSION := 1.5.6
ZSTD_URL := https://github.com/facebook/zstd/releases/download/v$(ZSTD_VERSION)/zstd-$(ZSTD_VERSION).tar.gz
CURL_VERSION := curl-8_13_0

# https://github.com/google/brotli/commit/641bec0e30bea648b3da1cd90fc6b44deb429f71
brotli_install_dir := $(abspath brotli-$(BROTLI_VERSION)/out/installed)
brotli_static_libs := $(brotli_install_dir)/lib/libbrotlicommon.a $(brotli_install_dir)/lib/libbrotlidec.a

boringssl_dir := $(abspath boringssl-$(BORING_SSL_COMMIT))
boringssl_install_dir := $(boringssl_dir)/build
boringssl_static_libs := $(boringssl_dir)/lib/libssl.a $(boringssl_dir)/lib/libcrypto.a

nghttp2_install_dir := $(abspath nghttp2-$(NGHTTP2_VERSION)/installed)
nghttp2_static_libs := $(nghttp2_install_dir)/lib/libnghttp2.a

ngtcp2_install_dir := $(abspath ngtcp2-$(NGTCP2_VERSION)/installed)
ngtcp2_static_libs := $(ngtcp2_install_dir)/lib/libngtcp2.a

libev_install_dir := $(abspath libev-$(LIBEV_VERSION)/installed)
libev_static_libs := $(libev_install_dir)/lib/libev.a

nghttp3_install_dir := $(abspath nghttp3-$(NGHTTP3_VERSION)/installed)
nghttp3_static_libs := $(nghttp3_install_dir)/lib/libnghttp3.a


zlib_install_dir := $(abspath zlib-$(ZLIB_VERSION)/installed)
zlib_static_libs := $(zlib_install_dir)/lib/libz.a

zstd_install_dir := $(abspath zstd-$(ZSTD_VERSION)/build/cmake/installed)
zstd_static_libs := $(zstd_install_dir)/lib/libzstd.a

# Dependencies needed to compile the Chrome version
chrome_libs := $(brotli_static_libs) $(boringssl_static_libs) \
			   $(nghttp2_static_libs) $(ngtcp2_static_libs) $(nghttp3_static_libs) \
			   $(zlib_static_libs) $(zstd_static_libs)

# The following variables will be set by the configure script.
prefix = @prefix@
exec_prefix = @exec_prefix@
srcdir = @abs_srcdir@
host = @host@
host_alias = @host_alias@
host_cpu = @host_cpu@
host_os = @host_os@
build = @build@
# Whether to link curl-impersonate with libcurl-impersonate statically.
static_build = @static_build@
# Path to be passed to curl's --with-ca-bundle configure option.
with_ca_bundle = @with_ca_bundle@
# Path to be passed to curl's --with-ca-path configure option.
with_ca_path = @with_ca_path@

CC = @CC@
CXX = @CXX@
STRIP = @STRIP@

# Auto-generate Makefile help.
# Borrowed from https://marmelab.com/blog/2016/02/29/auto-documented-makefile.html
help: ## Show this help message
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}'
.PHONY: help
.DEFAULT_GOAL := help

build: $(CURL_VERSION)/.chrome
	cd $(CURL_VERSION)
	# Don't pass this Makefile's MAKEFLAGS
	$(MAKE) MAKEFLAGS=-j$(SUBJOBS)
.PHONY: build

checkbuild: ## Run basic checks on the built binary
ifeq ($(host),$(build))
	cd $(CURL_VERSION)
	# Make sure all needed features were compiled in
	./src/curl-impersonate -V | grep -q zlib
	./src/curl-impersonate -V | grep -q zstd
	./src/curl-impersonate -V | grep -q brotli
	./src/curl-impersonate -V | grep -q nghttp2
	./src/curl-impersonate -V | grep -q nghttp3
	./src/curl-impersonate -V | grep -q BoringSSL
	$(info Build OK)
else
	$(info Cross compiling, skipping checkbuild)
endif
.PHONY: checkbuild

install:
	cd $(CURL_VERSION)
	$(MAKE) install-exec MAKEFLAGS=
	# Wrapper scripts for the cli shortcut (e.g. 'curl_chrome99')
	install $(srcdir)/bin/curl_* @bindir@
.PHONY: install

install-strip: ## Like 'install', but strip binaries for smaller size
	cd $(CURL_VERSION)
	$(MAKE) install-exec MAKEFLAGS=
	# We could have used 'install-strip' but then the docs would be installed as well.
	# Instead strip manually.
	$(STRIP) @bindir@/curl-impersonate
	# Wrapper scripts for the cli shortcut (e.g. 'curl_chrome99')
	install $(srcdir)/bin/curl_* @bindir@
.PHONY: install-strip

uninstall: ## Uninstall the Chrome version of curl-impersonate after 'make install'
	cd $(CURL_VERSION)
	$(MAKE) uninstall MAKEFLAGS=
	rm -Rf @bindir@/curl_*
.PHONY: uninstall

clean:
	## Remove all build artifacts, including dependencies
	rm -Rf zlib-$(ZLIB_VERSION).tar.gz zlib-$(ZLIB_VERSION)
	rm -Rf zstd-$(ZSTD_VERSION).tar.gz zstd-$(ZSTD_VERSION)
	rm -Rf brotli-$(BROTLI_VERSION).tar.gz brotli-$(BROTLI_VERSION)
	rm -Rf boringssl-$(BORING_SSL_COMMIT).zip boringssl-$(BORING_SSL_COMMIT)
	rm -Rf nghttp2-$(NGHTTP2_VERSION).tar.bz2 nghttp2-$(NGHTTP2_VERSION)
	rm -Rf ngtcp2-$(NGTCP2_VERSION).tar.bz2 ngtcp2-$(NGTCP2_VERSION)
	rm -Rf nghttp3-$(NGHTTP3_VERSION).tar.bz2 nghttp3-$(NGHTTP3_VERSION)
	rm -Rf $(CURL_VERSION).tar.gz $(CURL_VERSION)
.PHONY: clean


brotli-$(BROTLI_VERSION).tar.gz:
	curl -L $(BROTLI_URL) -o "brotli-${BROTLI_VERSION}.tar.gz"

$(brotli_static_libs): brotli-$(BROTLI_VERSION).tar.gz
	tar xf brotli-$(BROTLI_VERSION).tar.gz
	cd brotli-$(BROTLI_VERSION)
	mkdir -p out
	cd out

	# Convert autoconf style os name to CMake style os name.
	case $(host_os) in               \
		linux*)                      \
			system_name=Linux        \
			;;                       \
		darwin*)                     \
			system_name=Darwin       \
			;;                       \
		mingw*)                      \
			system_name=Windows      \
			;;                       \
		*)                           \
			system_name=$(host_os)   \
			;;                       \
	esac

	@cmake@ -DCMAKE_BUILD_TYPE=Release \
		-DCMAKE_INSTALL_PREFIX=./installed \
		-DCMAKE_INSTALL_LIBDIR=lib \
		-DCMAKE_CXX_COMPILER="$(CXX)" \
		-DCMAKE_C_COMPILER="$(CC)" \
		-DCMAKE_C_FLAGS="$(CFLAGS)" \
		-DCMAKE_SYSTEM_NAME=$$system_name \
		-DCMAKE_SYSTEM_PROCESSOR=$(host_cpu) \
		-DBUILD_SHARED_LIBS=OFF \
		..

	@cmake@ --build . --config Release --target install --parallel $(SUBJOBS)


zlib-$(ZLIB_VERSION).tar.gz:
	curl -L $(ZLIB_URL) -o zlib-$(ZLIB_VERSION).tar.gz

$(zlib_static_libs): zlib-$(ZLIB_VERSION).tar.gz
	  tar xf zlib-$(ZLIB_VERSION).tar.gz
	  cd zlib-$(ZLIB_VERSION)
	  CHOST=$(host) ./configure --prefix=$(zlib_install_dir)
	  mkdir -p $(zlib_install_dir)
	  $(MAKE)
	  $(MAKE) install
	  # Make sure curl will link with libz.so.1 and not libz.so
	  rm -f $(zlib_install_dir)/lib/libz.so

zstd-$(ZSTD_VERSION).tar.gz:
	curl -L $(ZSTD_URL) -o zstd-$(ZSTD_VERSION).tar.gz

$(zstd_static_libs): zstd-$(ZSTD_VERSION).tar.gz
	tar xf zstd-$(ZSTD_VERSION).tar.gz
	cd zstd-$(ZSTD_VERSION)

	case $(host_os) in          \
		linux*)                 \
			system_name=Linux   \
			;;                  \
		darwin*)                \
			system_name=Darwin  \
			;;                  \
		mingw*)                 \
			system_name=Windows \
			;;                  \
		*)                      \
			system_name=Linux   \
			;;                  \
	esac

	mkdir -p $(zstd_install_dir) && cd $(zstd_install_dir)

	@cmake@ -DCMAKE_BUILD_TYPE=Release \
		-DCMAKE_SYSTEM_NAME=$$system_name \
		-DCMAKE_INSTALL_PREFIX="$(zstd_install_dir)" \
		-DCMAKE_CXX_COMPILER="$(CXX)" \
		-DCMAKE_C_COMPILER="$(CC)" \
		-DCMAKE_C_FLAGS="$(CFLAGS)" \
		-DZSTD_BUILD_STATIC=ON \
		-DZSTD_BUILD_SHARED=OFF \
		..

	@cmake@ --build . --config Release --target install --parallel $(SUBJOBS)

boringssl-$(BORING_SSL_COMMIT).zip:
	curl -L https://github.com/google/boringssl/archive/$(BORING_SSL_COMMIT).zip \
		-o boringssl-$(BORING_SSL_COMMIT).zip

# Patch boringssl and use a dummy '.patched' file to mark it patched
boringssl-$(BORING_SSL_COMMIT)/.patched: $(srcdir)/patches/boringssl.patch
	unzip -q -o boringssl-$(BORING_SSL_COMMIT).zip
	# mv boringssl boringssl-$(BORING_SSL_COMMIT)
	cd boringssl-$(BORING_SSL_COMMIT)/
	for p in $^; do patch -p1 < $$p; done
	touch .patched

$(boringssl_static_libs): boringssl-$(BORING_SSL_COMMIT).zip boringssl-$(BORING_SSL_COMMIT)/.patched
	mkdir -p $(boringssl_install_dir)
	cd $(boringssl_install_dir)

	# Convert autoconf style os name to CMake style os name.
	case $(host_os) in          \
		linux*)                 \
			system_name=Linux   \
			;;                  \
		darwin*)                \
			system_name=Darwin  \
			;;                  \
		mingw*)                 \
			system_name=Windows \
			;;                  \
		*)                      \
			system_name=Linux   \
			;;                  \
	esac

	# The extra CMAKE_C_FLAGS are needed because otherwise boringssl fails to
	# compile in release mode on some systems with gcc 12 (e.g. Fedora).
	# In addition, guard these options with -Wno-unknown-warning-option to
	# prevent clang from failing on them.
	@cmake@ -DCMAKE_BUILD_TYPE=Release \
			-DBUILD_TESTING=OFF \
			-DCMAKE_POSITION_INDEPENDENT_CODE=on \
			-DCMAKE_ASM_NASM_FLAGS=--reproducible \
			-DBUILD_TESTING=OFF \
			-DCMAKE_C_FLAGS="$(CFLAGS) -Wno-unknown-warning-option -Wno-stringop-overflow -Wno-array-bounds -Wno-macro-redefined -Wno-format -Wno-error=format" \
			-DCMAKE_CXX_FLAGS="$(CXX_FLAGS) -Wno-macro-redefined -Wno-format -Wno-error=format" \
			-DCMAKE_CXX_COMPILER="$(CXX)" \
			-DCMAKE_C_COMPILER="$(CC)" \
			-DCMAKE_SYSTEM_NAME=$$system_name \
			-DCMAKE_SYSTEM_PROCESSOR=$(host_cpu) \
			-GNinja \
			..
	@ninja@ -j$(SUBJOBS)

	# Fix the directory structure so that curl can compile against it.
	# See: https://everything.curl.dev/build/boringssl.html
	mkdir -p $(boringssl_dir)/lib
	cp ssl/libssl.a $(boringssl_dir)/lib
	cp crypto/libcrypto.a $(boringssl_dir)/lib


nghttp2-$(NGHTTP2_VERSION).tar.bz2:
	curl -L $(NGHTTP2_URL) -o nghttp2-$(NGHTTP2_VERSION).tar.bz2

$(nghttp2_static_libs): nghttp2-$(NGHTTP2_VERSION).tar.bz2
	tar -xf nghttp2-$(NGHTTP2_VERSION).tar.bz2
	cd nghttp2-$(NGHTTP2_VERSION)

	# Set up the configure flags to nghttp2.
	# If the user provided the --host flag to our configure script
	# (for cross compilation), then pass it on to nghttp2.
	{ \
		config_flags="--prefix=$(nghttp2_install_dir)"; \
		config_flags="$$config_flags --with-pic --enable-lib-only"; \
		config_flags="$$config_flags --disable-shared --disable-python-bindings"; \
		if test -n "$(host_alias)"; then \
			config_flags="$$config_flags --host=$(host_alias)"; \
		fi; \
	}

	./configure $$config_flags
	$(MAKE) MAKEFLAGS=-j$(SUBJOBS)
	$(MAKE) install MAKEFLAGS=

ngtcp2-$(NGTCP2_VERSION).tar.bz2:
	curl -L $(NGTCP2_URL) -o ngtcp2-$(NGTCP2_VERSION).tar.bz2

$(ngtcp2_static_libs): ngtcp2-$(NGTCP2_VERSION).tar.bz2 $(boringssl_static_libs) $(nghttp3_static_libs) $(libev_static_libs)
	tar -xf ngtcp2-$(NGTCP2_VERSION).tar.bz2
	cd ngtcp2-$(NGTCP2_VERSION)

	autoreconf -i

	# Set up the configure flags to ngtcp2.
	# If the user provided the --host flag to our configure script
	# (for cross compilation), then pass it on to ngtcp2.
	# PKG_CONFIG_PATH=<somewhere1>/lib/pkgconfig:<somewhere2>/lib/pkgconfig LDFLAGS="-Wl,-rpath,<somewhere1>/lib"
	{ \
		config_flags="--prefix=$(ngtcp2_install_dir)"; \
		config_flags="$$config_flags --with-pic --enable-lib-only"; \
		config_flags="$$config_flags --disable-shared --disable-python-bindings"; \
		if test -n "$(host_alias)"; then \
			config_flags="$$config_flags --host=$(host_alias)"; \
		fi; \
	}

	./configure PKG_CONFIG_PATH=$(nghttp3_install_dir)/lib/pkgconfig \
		BORINGSSL_LIBS="-L$(boringssl_install_dir)/ssl -lssl -L$(boringssl_install_dir)/crypto -lcrypto -lpthread" \
		BORINGSSL_CFLAGS="-I$(boringssl_dir)/include" \
		--with-boringssl \
		$$config_flags
	$(MAKE) MAKEFLAGS=-j$(SUBJOBS)
	$(MAKE) install MAKEFLAGS=
	
	# case $(host_os) in          \
	# 	linux*)                 \
	# 		system_name=Linux   \
	# 		extra_ld=""         \
	# 		;;                  \
	# 	darwin*)                \
	# 		system_name=Darwin  \
	# 		extra_ld=""         \
	# 		;;                  \
	# 	mingw*)                 \
	# 		system_name=Windows \
	# 		extra_ld=";lws2_32" \
	# 		;;                  \
	# 	*)                      \
	# 		system_name=Linux   \
	# 		;;                  \
	# esac
	#
	# build_dir="./build"
	#
	# @cmake@ -B $$build_dir \
	# 	-DENABLE_LIB_ONLY=ON \
	# 	-DCMAKE_BUILD_TYPE=Release \
	# 	-DENABLE_STATIC_LIB=ON \
	# 	-DENABLE_SHARED_LIB=OFF \
	# 	-DENABLE_OPENSSL=OFF \
	# 	-DENABLE_BORINGSSL=ON \
	# 	-DBORINGSSL_INCLUDE_DIR="$(boringssl_dir)/include" \
	# 	-DBORINGSSL_LIBRARIES="$(boringssl_install_dir)/ssl/libssl.a;$(boringssl_install_dir)/crypto/libcrypto.a;-lpthread$$extra_ld" \
	# 	-DBUILD_TESTING=OFF \
	# 	-DCMAKE_POSITION_INDEPENDENT_CODE=on \
	# 	-DCMAKE_C_FLAGS="$(CFLAGS) -Wno-unknown-warning-option -Wno-stringop-overflow -Wno-array-bounds -Wno-macro-redefined" \
	# 	-DCMAKE_CXX_FLAGS="$(CXX_FLAGS) -DNDEBUG -D_CLANG_DISABLE_CRT_DEPRECATION_WARNINGS -DNOCRYPT -Wno-macro-redefined" \
	# 	-DCMAKE_CXX_COMPILER="$(CXX)" \
	# 	-DCMAKE_INSTALL_PREFIX="$(ngtcp2_install_dir)" \
	# 	-DCMAKE_C_COMPILER="$(CC)" \
	# 	-DCMAKE_SYSTEM_NAME=$$system_name \
	# 	-DCMAKE_SYSTEM_PROCESSOR=$(host_cpu) \
	#
	# @cmake@ --build $$build_dir
	# @cmake@ --install $$build_dir

libev-$(LIBEV_VERSION).tar.gz:
	curl -L $(LIBEV_URL) -o libev-$(LIBEV_VERSION).tar.gz

$(libev_static_libs): libev-$(LIBEV_VERSION).tar.gz
	tar -xf libev-$(LIBEV_VERSION).tar.gz
	cd libev-$(LIBEV_VERSION)

	{ \
		config_flags="--prefix=$(libev_install_dir)"; \
		config_flags="$$config_flags --with-pic --enable-lib-only"; \
		config_flags="$$config_flags --disable-shared"; \
		if test -n "$(host_alias)"; then \
			config_flags="$$config_flags --host=$(host_alias)"; \
		fi; \
	}

	./configure $$config_flags
	$(MAKE) MAKEFLAGS=-j$(SUBJOBS)
	$(MAKE) install MAKEFLAGS=


nghttp3-$(NGHTTP3_VERSION).tar.bz2:
	curl -L $(NGHTTP3_URL) -o nghttp3-$(NGHTTP3_VERSION).tar.bz2

$(nghttp3_static_libs): nghttp3-$(NGHTTP3_VERSION).tar.bz2
	tar -xf nghttp3-$(NGHTTP3_VERSION).tar.bz2
	cd nghttp3-$(NGHTTP3_VERSION)

	# Set up the configure flags to nghttp2.
	# If the user provided the --host flag to our configure script
	# (for cross compilation), then pass it on to nghttp2.
	{ \
		config_flags="--prefix=$(nghttp3_install_dir)"; \
		config_flags="$$config_flags --with-pic --enable-lib-only"; \
		config_flags="$$config_flags --disable-shared --disable-python-bindings"; \
		if test -n "$(host_alias)"; then \
			config_flags="$$config_flags --host=$(host_alias)"; \
		fi; \
	}

	./configure $$config_flags
	$(MAKE) MAKEFLAGS=-j$(SUBJOBS)
	$(MAKE) install MAKEFLAGS=

$(CURL_VERSION).tar.gz:
	curl -L "https://github.com/curl/curl/archive/$(CURL_VERSION).tar.gz" \
		-o "$(CURL_VERSION).tar.gz"

# Apply the "Chorme version" patches and mark using a dummy file
$(CURL_VERSION)/.patched: $(srcdir)/patches/curl.patch
	rm -Rf $(CURL_VERSION)
	tar -xf $(CURL_VERSION).tar.gz
	mv curl-$(CURL_VERSION) $(CURL_VERSION)  # fix directory name
	cd $(CURL_VERSION)
	for p in $^; do patch -p1 < $$p; done
	# Re-generate the configure script
	autoreconf -fi
	touch .patched

# This is a small hack that flags that curl was patched and configured in the "chrome" version
$(CURL_VERSION)/.chrome: $(chrome_libs)	$(CURL_VERSION).tar.gz $(CURL_VERSION)/.patched
	cd $(CURL_VERSION)

	# Set up the configure flags to curl.
	# If the user provided the --host flag to our configure script
	# (for cross compilation), then pass it on to curl.
	
	# XXX: psl should be enabled in the future:
	# https://daniel.haxx.se/blog/2024/01/10/psl-in-curl/
	{ \
	  config_flags="--prefix=@prefix@"; \
	  config_flags="$$config_flags --with-brotli=$(brotli_install_dir)"; \
	  config_flags="$$config_flags --with-nghttp2=$(nghttp2_install_dir)"; \
	  config_flags="$$config_flags --with-ngtcp2=$(ngtcp2_install_dir)"; \
	  config_flags="$$config_flags --with-nghttp3=$(nghttp3_install_dir)"; \
	  config_flags="$$config_flags --with-openssl=$(boringssl_dir)"; \
	  config_flags="$$config_flags --with-zlib=$(zlib_install_dir)"; \
	  config_flags="$$config_flags --with-zstd=$(zstd_install_dir)"; \
	  config_flags="$$config_flags --without-libpsl"; \
	  config_flags="$$config_flags --enable-websockets"; \
	  config_flags="$$config_flags --enable-ech"; \
	  config_flags="$$config_flags --enable-ipv6"; \
	  config_flags="$$config_flags USE_CURL_SSLKEYLOGFILE=true"; \
	  if test "$(static_build)" = "yes"; then \
	    config_flags="$$config_flags --enable-static --disable-shared"; \
	  fi; \
	  if test -n "$(host_alias)"; then \
	    config_flags="$$config_flags --host=$(host_alias)"; \
	  fi; \
	  if test -n "$(with_ca_bundle)"; then \
		config_flags="$$config_flags --with-ca-bundle=$(with_ca_bundle)"; \
	  fi; \
	  if test -n "$(with_ca_path)"; then \
		config_flags="$$config_flags --with-ca-path=$(with_ca_path)"; \
	  fi; \
	}

	echo "Configuring curl with: $$config_flags"

	CXXFLAGS="$$CXXFLAGS -stdlib=libc++" LDFLAGS="$$LDFLAGS -lc++ -Wl,-rpath,$(ngtcp2_install_dir)/lib" \
			 ./configure \
			 $$config_flags \
			 LIBS="-pthread -lc++ $$LIBS" \
			 PKG_CONFIG_PATH="$(ngtcp2_install_dir)/crypto/boringssl/;$(ngtcp2_install_dir)/lib/pkgconfig"

	# Remove possible leftovers from a previous compilation
	$(MAKE) clean MAKEFLAGS=
	touch .chrome
